parameters:
  - name: testClusterUpgrade
    type: boolean
    default: false
  - name: testWithGPU
    type: boolean
    default: false

steps:
  - script: |
      if [[ -z "${AZURE_CLUSTER_NAME}" ]]; then
        clusterName=sscd-e2e-$(openssl rand -hex 6)
        echo "##vso[task.setvariable variable=AZURE_CLUSTER_NAME]$clusterName"
        echo "AKS cluster name is set to - $clusterName"
      fi
    displayName: "Set cluster name"
    condition: succeeded()

  - script: |
      echo "##vso[task.setvariable variable=NODE_VM_SIZE]Standard_DS2_v2"
    displayName: "Determine VM Size"
    condition: succeeded()

  - script: |
      # Run test with latest non-preview aks version available
      aksVersion=$(az aks get-versions -l $(AZURE_LOCATION) --query 'values[?isPreview==null].patchVersions[]' | jq '[.[] | to_entries[] | .key ] | max')
      echo "AKS Install version - $aksVersion"

      echo "##vso[task.setvariable variable=AKS_INSTALL_VERSION]$aksVersion"
    displayName: "Determine aks install version"
    condition: succeeded()

  - ${{ if eq(parameters.testClusterUpgrade, true) }}:
    # Overrride AKS_INSTALL_VERSION if testing with k8s upgrade
    # If we are running test with cluster upgrade, start with minimum possible non preview version.
    - script: |
        aksVersion=$(az aks get-versions -l $(AZURE_LOCATION) --query 'values[?isPreview==null].patchVersions[]' | jq '[.[] | to_entries[] | .key ] | min')
        echo "AKS Install version - $aksVersion"

        echo "##vso[task.setvariable variable=AKS_INSTALL_VERSION]$aksVersion"
      displayName: "Determine aks install version"
      condition: succeeded()

  - script: |
      az group create -n ${AZURE_CLUSTER_NAME} -l $(AZURE_LOCATION)

      az aks create \
        -g ${AZURE_CLUSTER_NAME} \
        -n ${AZURE_CLUSTER_NAME} \
        --enable-managed-identity \
        --kubernetes-version $(AKS_INSTALL_VERSION) \
        --node-count $(AGENT_COUNT) \
        --nodepool-name nodepool1 \
        --node-vm-size $(NODE_VM_SIZE) \
        --location $(AZURE_LOCATION) \
        --windows-admin-username azureuser \
        --windows-admin-password $(WINDOWS_ADMIN_PASSWORD) \
        --no-ssh-key \
        --load-balancer-sku standard \
        --network-plugin azure \
        --max-pods $(MAX_PODS) \
        --load-balancer-managed-outbound-ip-count 6 \
        --enable-oidc-issuer
        MASTERIP=$(az aks show \
          -g ${AZURE_CLUSTER_NAME} \
          -n ${AZURE_CLUSTER_NAME} \
          --query 'fqdn' -o tsv)
        echo "##vso[task.setvariable variable=MASTERIP]${MASTERIP}"
        echo "##vso[task.setvariable variable=MASTERINTERNALIP]${MASTERIP}"
      
      OIDC_ISSUER_URL=$(az aks show -g ${AZURE_CLUSTER_NAME} -n ${AZURE_CLUSTER_NAME} --query "oidcIssuerProfile.issuerUrl" -otsv)
      echo "##vso[task.setvariable variable=OIDC_ISSUER_URL]${OIDC_ISSUER_URL}"
      echo "OIDC_ISSUER_URL=${OIDC_ISSUER_URL}"

      if [[ "$(OS_TYPE)" == "windows" ]]; then
        az aks nodepool add -g ${AZURE_CLUSTER_NAME} --cluster-name ${AZURE_CLUSTER_NAME} --os-type Windows --name win --node-count 1 ${EXTRA_ARGS:-} > /dev/null
      fi

      # add gpu node pool
      if [[ ${{ parameters.testWithGPU }} == True ]]; then
        echo "adding gpu node pool"
        az extension add --name aks-preview

        az aks nodepool add -g ${AZURE_CLUSTER_NAME} --cluster-name ${AZURE_CLUSTER_NAME} --name gpu --node-count $(AGENT_COUNT) --node-vm-size Standard_NC6 --aks-custom-headers UseGPUDedicatedVHD=true
      fi

      # store kubeconfig
      az aks get-credentials -n ${AZURE_CLUSTER_NAME} -g ${AZURE_CLUSTER_NAME}

      # set CLUSTER_RESOURCE_GROUP for e2e test config
      CLUSTER_RESOURCE_GROUP="$(az aks show -g ${AZURE_CLUSTER_NAME} -n ${AZURE_CLUSTER_NAME} --query nodeResourceGroup -otsv)"
      echo "##vso[task.setvariable variable=CLUSTER_RESOURCE_GROUP]${CLUSTER_RESOURCE_GROUP}"

      # Sleep for 120 seconds to wait for nodes and pods to become ready
      sleep 2m
      kubectl wait --for=condition=ready node --all
      kubectl wait pod -n kube-system --for=condition=Ready --all
      kubectl get nodes -owide
      kubectl cluster-info
      kubectl describe nodes
    displayName: "Deploy Kubernetes cluster"
    condition: succeeded()
