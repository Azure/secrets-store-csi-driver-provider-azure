parameters:
  - name: testClusterUpgrade
    type: boolean
    default: false

steps:
  - script: |
      echo "##vso[task.setvariable variable=AZURE_CLUSTER_NAME]sscd-e2e-$(openssl rand -hex 6)"
      echo ${AZURE_CLUSTER_NAME}
    displayName: "Set cluster name"
    condition: and(succeeded(), eq(variables['CLUSTER_TYPE'], 'aks'))
    
  - script: | 
      #Run test with latest on preview aks version available
      aksVersion=$(az aks get-versions -l $(AZURE_LOCATION) --query "max(orchestrators[?isPreview==null].orchestratorVersion)" -otsv)
      echo "AKS Install version - $aksVersion"

      echo "##vso[task.setvariable variable=AKS_INSTALL_VERSION]$aksVersion"
    displayName: "Determine aks install version"
    condition: and(succeeded(), eq(variables['CLUSTER_TYPE'], 'aks'))

  - ${{ if eq(parameters.testClusterUpgrade, true) }}:
    #Overrride AKS_INSTALL_VERSION if testing with k8s upgrade
    #If we are running test with cluster upgrade, start with minimum possible non preview version. 
    - script: |
        aksVersion=$(az aks get-versions -l $(AZURE_LOCATION) --query "min(orchestrators[?isPreview==null].orchestratorVersion)" -otsv)
        echo "AKS Install version - $aksVersion"

        echo "##vso[task.setvariable variable=AKS_INSTALL_VERSION]$aksVersion"
      displayName: "Determine aks install version"
      condition: and(succeeded(), eq(variables['CLUSTER_TYPE'], 'aks'))

  - script: |
      az group create -n ${AZURE_CLUSTER_NAME} -l $(AZURE_LOCATION)

      az aks create \
        -g ${AZURE_CLUSTER_NAME} \
        -n ${AZURE_CLUSTER_NAME} \
        --kubernetes-version $(AKS_INSTALL_VERSION) \
        --node-count $(AGENT_COUNT) \
        --nodepool-name nodepool1 \
        --node-vm-size Standard_DS2_v2 \
        --location $(AZURE_LOCATION) \
        --service-principal $(AAD_CLIENT_ID) \
        --client-secret $(AAD_CLIENT_SECRET) \
        --windows-admin-username azureuser \
        --windows-admin-password $(WINDOWS_ADMIN_PASSWORD) \
        --no-ssh-key \
        --load-balancer-sku standard \
        --network-plugin azure \
        --max-pods $(MAX_PODS) \
        --load-balancer-managed-outbound-ip-count 6
        MASTERIP=$(az aks show \
          -g ${AZURE_CLUSTER_NAME} \
          -n ${AZURE_CLUSTER_NAME} \
          --query 'fqdn' -o tsv)
        echo "##vso[task.setvariable variable=MASTERIP]${MASTERIP}"
        echo "##vso[task.setvariable variable=MASTERINTERNALIP]${MASTERIP}"

      if [[ $CLUSTER_CONFIG == "windows" ]]; then
        az aks nodepool add \
            -g ${AZURE_CLUSTER_NAME} \
            --cluster-name ${AZURE_CLUSTER_NAME} \
            --os-type Windows \
            --name win \
            --node-count 1
      fi

      # store kubeconfig
      az aks get-credentials -n ${AZURE_CLUSTER_NAME} -g ${AZURE_CLUSTER_NAME}

      # set CLUSTER_RESOURCE_GROUP for e2e test config
      CLUSTER_RESOURCE_GROUP="$(az aks show -g ${AZURE_CLUSTER_NAME} -n ${AZURE_CLUSTER_NAME} --query nodeResourceGroup -otsv)"
      echo "##vso[task.setvariable variable=CLUSTER_RESOURCE_GROUP]${CLUSTER_RESOURCE_GROUP}"

      # Sleep for 120 seconds to wait for nodes and pods to become ready
      sleep 2m
      kubectl wait --for=condition=ready node --all
      kubectl wait pod -n kube-system --for=condition=Ready --all
      kubectl get nodes -owide
      kubectl cluster-info
    displayName: "Deploy Kubernetes cluster"
    condition: and(succeeded(), eq(variables['CLUSTER_TYPE'], 'aks'))
