jobs:
  - job: e2e_arc_proxy_test
    steps:
      - script: |
          # git clone https://msazure@dev.azure.com/msazure/One/_git/arc-proxy-simulation
          git clone https://AzureContainerUpstream@dev.azure.com/msazure/One/_git/arc-proxy-simulation
        displayName: "checkout arc proxy simulation repo"
        condition: succeeded()
      - script: |
          sudo apt-get update && sudo apt-get install -y gnupg software-properties-common curl
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
          sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
          sudo apt-get update && sudo apt-get install terraform
        displayName: "install terraform"
        condition: succeeded()
      - script: |
          clusterName=sscd-arc-proxy-e2e-$(openssl rand -hex 6)
          echo "##vso[task.setvariable variable=AZURE_CLUSTER_NAME]$clusterName"
          echo "cluster name is set to - $clusterName"
        displayName: "set cluster name"
        condition: succeeded()
      - script: |
          cd arc-proxy-simulation
          export TF_VAR_prefix="$(AZURE_CLUSTER_NAME)"

          # create ssh key pair for vm
          publickeypath=$(pwd)/proxy
          ssh-keygen -t rsa -b 4096 -f $publickeypath -q -N ""
          export TF_VAR_publickeypath="$publickeypath"

          # create cluster
          terraform init
          terraform plan
          terraform apply -auto-approve

          # set proxy vm's private ip
          proxyNoAuthVmIP=$(az vm show -g $(AZURE_CLUSTER_NAME) -n $(AZURE_CLUSTER_NAME)-proxynoauthvm -d --query "privateIps" -otsv)
          echo "##vso[task.setvariable variable=PROXY_NO_AUTH_VM_IP]$proxyNoAuthVmIP"

          proxyBasicVmIP=$(az vm show -g $(AZURE_CLUSTER_NAME) -n $(AZURE_CLUSTER_NAME)-proxybasicvm -d --query "privateIps" -otsv)
          echo "##vso[task.setvariable variable=PROXY_BASIC_VM_IP]$proxyBasicVmIP"

          proxyCertVmIP=$(az vm show -g $(AZURE_CLUSTER_NAME) -n $(AZURE_CLUSTER_NAME)-proxycertvm -d --query "privateIps" -otsv)
          echo "##vso[task.setvariable variable=PROXY_CERT_VM_IP]$proxyCertVmIP"
        displayName: "setup proxy cluster"
        condition: succeeded()
      - template: teardown.yaml