jobs:
  - job:
    variables:
    - name: AZURE_ENVIRONMENT_FILEPATH
      value: /etc/kubernetes/custom_environment.json
    - name: VOLUME_NAME
      value: cloudenvfile-vol
    - group: csi-secrets-store-e2e-kind
    steps:
      - script: |
          az login -i > /dev/null
          az account set -s=$(SUBSCRIPTION_ID)
        displayName: "az login"
      - script: |
          IMAGE_VERSION="$(git describe --tags $(git rev-list --tags --max-count=1))-$(git rev-parse --short HEAD)-arc-ext"
          echo "IMAGE_VERSION=$IMAGE_VERSION"
          # REGISTRY_NAME="upstream"
          # REPO_PREFIX="oss/azure/secrets-store"
          # IMAGE_NAME="provider-azure-arc"

          az acr login -n upstream
          REGISTRY_NAME=upstream  REPO_PREFIX=oss/azure/secrets-store IMAGE_NAME=provider-azure-arc IMAGE_VERSION=$IMAGE_VERSION make e2e-bootstrap
        displayName: Build and push e2e image
      # - template: install-oras.yaml
      # - template: install-helm3.yaml
      # - script: |
      #     buildNumber="$(echo $(Build.BuildNumber) | tr -d '.')"
      #     version="0.0.$buildNumber"
      #     echo "version - $version"
      #     helm dependency update manifest_staging/charts/csi-secrets-store-provider-azure
      #     helm package manifest_staging/charts/csi-secrets-store-provider-azure --version $version

      #     echo "Authenticating..."
      #     # az login --identity
      #     az acr login -n upstream

      #     echo 'Pushing chart...'
      #     oras push upstream.azurecr.io/oss/azure/secrets-store/provider-azure-arc:$version ./csi-secrets-store-provider-azure-$version.tgz:application/tar+gzip --debug
      #   displayName: 'Push OCI helm chart to ACR'
      # - script: |
      #     az extension add --name connectedk8s
      #     az extension add --name k8s-extension
      #   displayName: "add cli extensions"
      # - script: |
      #     make install-helm install-kubectl setup-kind
      #   displayName: "install dependencies and setup kind"
      # - script: |
      #     clusterName=sscd-arc-e2e-$(openssl rand -hex 6)
      #     echo "##vso[task.setvariable variable=AZURE_CLUSTER_NAME]$clusterName"
      #     echo "cluster name is set to - $clusterName"
      #   displayName: "set cluster name"
      #   condition: succeeded()
      # - script: |
      #     az group create -n ${AZURE_CLUSTER_NAME} -l $(AZURE_CANARY_LOCATION)

      #     az connectedk8s connect -n ${AZURE_CLUSTER_NAME} -g ${AZURE_CLUSTER_NAME} --no-wait

      #     # It takes time for Arc pods to come up. Sometimes, in such cases helm might report unable to install helm release, but in fact Arc operators gets installed and able to connect to the cluster. Also, az connectedk8s connect will go through different phases (Connecting, Connected etc.) of installation. So to address both, we are checking the status later without waiting.
      #     echo "verifying cluster connectivity..."
      #     for i in $(seq 1 25); do
      #       provisioningState=$(az connectedk8s list --resource-group ${AZURE_CLUSTER_NAME} --query "[*].provisioningState" -otsv)
      #       connectivityStatus=$(az connectedk8s list --resource-group ${AZURE_CLUSTER_NAME} --query "[*].connectivityStatus" -otsv)
      #       if [ "$provisioningState" == "Succeeded" ]  && [ "$connectivityStatus" == "Connected" ]; then
      #         echo "KinD cluster is 'Connected'"
      #         break
      #       else
      #         echo "Provisioning state - $provisioningState.  Connectivity status - $connectivityStatus"
      #         sleep 1
      #       fi
      #     done

      #     if [ "$connectivityStatus" != "Connected" ]; then
      #       echo "failed to connect to the cluster."
      #       exit 1
      #     fi
      #   displayName: "connect KinD cluster"
      #   condition: succeeded()
      # - template: teardown.yaml