jobs:
  - job: e2e_arc_test
    variables:
    - name: AZURE_ENVIRONMENT_FILEPATH
      value: /etc/kubernetes/custom_environment.json
    - name: VOLUME_NAME
      value: cloudenvfile-vol
    - group: csi-secrets-store-e2e
    steps:
      # - template: az-login.yaml
      # - script: |
      #     export REGISTRY="e2e"
      #     echo "Registry: $REGISTRY"
      #     echo "##vso[task.setvariable variable=REGISTRY]${REGISTRY}"

      #     IMAGE_VERSION="$(git describe --tags $(git rev-list --tags --max-count=1))-$(git rev-parse --short HEAD)-arc-e2e"
      #     echo "Image version: ${IMAGE_VERSION}"
      #     export IMAGE_VERSION="${IMAGE_VERSION}"
      #     echo "##vso[task.setvariable variable=IMAGE_VERSION]${IMAGE_VERSION}"

      #     make e2e-bootstrap
      #   displayName: "build e2e image"
      #   condition: succeeded()
      #   env:
      #     CI_KIND_CLUSTER: true
      - template: build-images.yaml
        parameters:
          registry: e2e
          ciKindCluster: true
      - template: install-oras.yaml
      - script: |
          buildNumber="$(echo $(Build.BuildNumber) | tr -d '.')"
          version="0.0.$buildNumber"
          echo "##vso[task.setvariable variable=EXT_VERSION]$version"

          helm dependency update manifest_staging/charts/csi-secrets-store-provider-azure
          helm package manifest_staging/charts/csi-secrets-store-provider-azure --version $version

          echo "Authenticating..."
          az acr login -n $(STAGING_REGISTRY_NAME)

          echo 'Pushing chart...'
          oras push $(STAGING_REGISTRY):$version ./csi-secrets-store-provider-azure-$version.tgz:application/tar+gzip --debug
        displayName: 'Push OCI helm chart to ACR'
        condition: succeeded()
      - template: arc-setup.yaml
      - template: arc-connect.yaml
      - template: arc-extension-create.yaml
        parameters:
          azureClusterName: ${AZURE_CLUSTER_NAME}
          extensionVersion: $(EXT_VERSION)
          releaseTrain: dev
          configurationSettings: "'secrets-store-csi-driver.enableSecretRotation=true' \
          'secrets-store-csi-driver.rotationPollInterval=30s' \
          'linux.image.tag=$(IMAGE_VERSION)' \
          'linux.image.repository=$(REGISTRY)/provider-azure' \
          'secrets-store-csi-driver.syncSecret.enabled=true' \
          'linux.volumes[0].name=$(VOLUME_NAME)' \
          'linux.volumes[0].hostPath.path=$(AZURE_ENVIRONMENT_FILEPATH)' \
          'linux.volumes[0].hostPath.type=File' \
          'linux.volumeMounts[0].name=$(VOLUME_NAME)' \
          'linux.volumeMounts[0].mountPath=$(AZURE_ENVIRONMENT_FILEPATH)'"
      # - script: |
      #     az k8s-extension create \
      #     --name ${AZURE_CLUSTER_NAME} \
      #     --extension-type Microsoft.AzureKeyVaultSecretsProvider \
      #     --scope cluster \
      #     --cluster-name ${AZURE_CLUSTER_NAME} \
      #     --resource-group ${AZURE_CLUSTER_NAME} \
      #     --cluster-type connectedClusters \
      #     --release-train dev \
      #     --version $(EXT_VERSION) \
      #     --release-namespace kube-system \
      #     --configuration-settings 'secrets-store-csi-driver.enableSecretRotation=true' \
      #     'secrets-store-csi-driver.rotationPollInterval=30s' \
      #     'linux.image.tag=$(IMAGE_VERSION)' \
      #     'linux.image.repository=$(REGISTRY)/provider-azure' \
      #     'secrets-store-csi-driver.syncSecret.enabled=true' \
      #     'linux.volumes[0].name=$(VOLUME_NAME)' \
      #     'linux.volumes[0].hostPath.path=$(AZURE_ENVIRONMENT_FILEPATH)' \
      #     'linux.volumes[0].hostPath.type=File' \
      #     'linux.volumeMounts[0].name=$(VOLUME_NAME)' \
      #     'linux.volumeMounts[0].mountPath=$(AZURE_ENVIRONMENT_FILEPATH)'

      #     # Arc extensions will go through different phases (Pending, Installed etc.) of installation. We want to make sure extension is 'Installed' before running e2e tests.
      #     echo "verifying extension install status..."
      #     for i in $(seq 1 30); do
      #       installState=$(az k8s-extension show -c ${AZURE_CLUSTER_NAME} -t connectedClusters -n ${AZURE_CLUSTER_NAME} -g ${AZURE_CLUSTER_NAME} --query "installState" -otsv)
      #       if [ "$installState" == "Installed" ]; then
      #         echo "AzureKeyVaultSecretsProvider extension is 'Installed'"
      #         break
      #       else
      #         echo "Install state - $installState"
      #         sleep 2
      #       fi
      #     done

      #     if [ "$installState" != "Installed" ]; then
      #       echo "failed to install extension."
      #       exit 1
      #     fi

      #     helm ls -A
      #     helm get values ${AZURE_CLUSTER_NAME} -n kube-system
      #     kubectl get pods -n kube-system
      #   displayName: "install AzureKeyVaultSecretsProvider extension"
      #   condition: succeeded()
      # - script: |
      #     make e2e-test
      #   displayName: Run e2e tests
      #   env:
      #     AZURE_CLIENT_ID: $(AZURE_CLIENT_ID)
      #     AZURE_CLIENT_SECRET: $(AZURE_CLIENT_SECRET)
      #     KEY_NAME: $(KEY_NAME)
      #     KEY_VERSION: $(KEY_VERSION)
      #     KEYVAULT_NAME: $(KEYVAULT_NAME)
      #     SECRET_NAME: $(SECRET_NAME)
      #     TENANT_ID: $(TENANT_ID)
      #     CI_KIND_CLUSTER: true
      #     AZURE_ENVIRONMENT_FILEPATH: $(AZURE_ENVIRONMENT_FILEPATH)
      #     IS_ARC_TEST: true
      #   condition: succeeded()
      - template: e2e-test.yaml
        parameters:
          testName: "arc extension e2e test"
          ciKindCluster: true
          isArcTest: true
          azureEnvironmentFilepath: $(AZURE_ENVIRONMENT_FILEPATH)
      - script: |
          az account set -s=$(SUBSCRIPTION_ID)
          az acr login -n $(STAGING_REGISTRY_NAME)

          registry=$(STAGING_REGISTRY)
          respository=${registry#*/}
          echo "deleting - $respository:$(EXT_VERSION)"
          az acr repository delete --name $(STAGING_REGISTRY_NAME) -t $respository:$(EXT_VERSION) -y || true
        displayName: "delete e2e OCI helm chart"
        condition: always()
      - template: teardown.yaml
