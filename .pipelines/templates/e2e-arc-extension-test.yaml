variables:
  GOPATH: $(Pipeline.Workspace)/go
  repo.path: $(GOPATH)/src/github.com/Azure/secrets-store-csi-driver-provider-azure
  chart.artifact.upload.dir: $(Build.ArtifactStagingDirectory)
  chart.artifact.download.dir: $(Agent.BuildDirectory)
  chart.artifact.name: chart
  image.tag: $(chart.tag)

jobs:
  - template: build-images.yaml
  - script: |
      mkdir -p oras/
      curl -LO https://github.com/deislabs/oras/releases/download/v${{ parameters.version }}/oras_${{ parameters.version }}_linux_amd64.tar.gz
      tar xvzf oras_${{ parameters.version }}_linux_amd64.tar.gz -C oras/
      tree $(Pipeline.Workspace)
      echo "##vso[task.setvariable variable=PATH]${PATH}:$(Pipeline.Workspace)/oras"
      oras version
    displayName: Install ORAS
    workingDirectory: $(Pipeline.Workspace)
  # - script: |
  #     az login -i > /dev/null
  #     az account set -s=$(SUBSCRIPTION_ID)
  #   displayName: "az login"
  - script: |
      buildNumber="99.99.${$(Build.BuildNumber)//.}"
      echo "build no - $buildNumber"
      helm package manifest_staging/charts/csi-secrets-store-provider-azure --version $buildNumber

      echo "Authenticating..."
      # az login --identity
      az acr login -n upstream

      echo 'Pushing chart...'
      oras push upstream.azurecr.io/oss/azure/secrets-store/provider-azure-arc:$buildNumber ./csi-secrets-store-provider-azure-$buildNumber.tgz:application/tar+gzip --debug
    displayName: 'Push OCI helm chart to ACR'
  - script: |
      az extension add --name connectedk8s
      az extension add --name k8s-extension
    displayName: "add cli extensions"
  - script: |
      make install-helm install-kubectl setup-kind
    displayName: "install dependencies and setup kind"
  - script: |
      clusterName=sscd-arc-e2e-$(openssl rand -hex 6)
      echo "##vso[task.setvariable variable=AZURE_CLUSTER_NAME]$clusterName"
      echo "cluster name is set to - $clusterName"
    displayName: "set cluster name"
    condition: succeeded()
  - script: |
      az group create -n ${AZURE_CLUSTER_NAME} -l $(AZURE_CANARY_LOCATION)

      az connectedk8s connect -n ${AZURE_CLUSTER_NAME} -g ${AZURE_CLUSTER_NAME} --no-wait

      # It takes time for Arc pods to come up. Sometimes, in such cases helm might report unable to install helm release, but in fact Arc operators gets installed and able to connect to the cluster. Also, az connectedk8s connect will go through different phases (Connecting, Connected etc.) of installation. So to address both, we are checking the status later without waiting.
      echo "verifying cluster connectivity..."
      for i in $(seq 1 25); do
        provisioningState=$(az connectedk8s list --resource-group ${AZURE_CLUSTER_NAME} --query "[*].provisioningState" -otsv)
        connectivityStatus=$(az connectedk8s list --resource-group ${AZURE_CLUSTER_NAME} --query "[*].connectivityStatus" -otsv)
        if [ "$provisioningState" == "Succeeded" ]  && [ "$connectivityStatus" == "Connected" ]; then
          echo "KinD cluster is 'Connected'"
          break
        else
          echo "Provisioning state - $provisioningState.  Connectivity status - $connectivityStatus"
          sleep 1
        fi
      done

      if [ "$connectivityStatus" != "Connected" ]; then
        echo "failed to connect to the cluster."
        exit 1
      fi
    displayName: "connect KinD cluster"
    condition: succeeded()