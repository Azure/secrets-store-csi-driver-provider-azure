steps:
  - script: |
      echo "##vso[task.setvariable variable=AZURE_CLUSTER_NAME]sscd-e2e-$(openssl rand -hex 6)"
      echo ${AZURE_CLUSTER_NAME}
    displayName: "[AKS Engine] Set cluster name"
    condition: and(succeeded(), eq(variables['CLUSTER_TYPE'], 'aks-engine'))

  - script: |
      echo "##vso[task.setvariable variable=AZURE_ADMIN_USERNAME]$USER"
      echo -e 'y\n' | ssh-keygen -f ~/.ssh/$(AZURE_CLUSTER_NAME) -t rsa -N ''
      echo "##vso[task.setvariable variable=AZURE_SSH_KEY]$(cat ~/.ssh/$(AZURE_CLUSTER_NAME).pub)"
      echo "##vso[task.setvariable variable=LOCAL_SSH_KEY]$HOME/.ssh/$(AZURE_CLUSTER_NAME)"
    displayName: "[AKS Engine] Generate SSH key"
    condition: and(succeeded(), eq(variables['CLUSTER_TYPE'], 'aks-engine'))

  - script: |
      envsubst < test/e2e/cluster_configs/$(CLUSTER_CONFIG).json > cluster.json
    displayName: "[AKS Engine] Build AKS-Engine API Model"
    condition: and(succeeded(), eq(variables['CLUSTER_TYPE'], 'aks-engine'))
    env:
      CLIENT_ID: $(AAD_CLIENT_ID)
      CLIENT_SECRET: $(AAD_CLIENT_SECRET)

  - script: |
      aks-engine deploy --api-model cluster.json \
        --location ${AZURE_LOCATION} \
        --subscription-id ${SUBSCRIPTION_ID} \
        --force-overwrite \
        --client-id ${CLIENT_ID} \
        --client-secret ${CLIENT_SECRET}

      export KUBECONFIG="$(pwd)/_output/${AZURE_CLUSTER_NAME}/kubeconfig/kubeconfig.${AZURE_LOCATION}.json"
      echo "##vso[task.setvariable variable=KUBECONFIG]${KUBECONFIG}"

      # Sleep for 120 seconds to wait for nodes and pods to become ready
      sleep 2m
      kubectl wait --for=condition=ready node --all
      kubectl wait pod -n kube-system --for=condition=Ready --all
      kubectl get nodes -owide
      kubectl cluster-info
    displayName: "[AKS Engine] Deploy Azure cluster"
    condition: and(succeeded(), eq(variables['CLUSTER_TYPE'], 'aks-engine'))
    env:
      CLIENT_ID: $(AAD_CLIENT_ID)
      CLIENT_SECRET: $(AAD_CLIENT_SECRET)
      SUBSCRIPTION_ID: $(SUBSCRIPTION_ID)

  - script: |
      az login -t microsoft.com --service-principal -u ${CLIENT_ID} -p ${CLIENT_SECRET}
      az account set -s ${SUBSCRIPTION_ID}
      VMSS_NAME=$(az vmss list -g ${AZURE_CLUSTER_NAME} --subscription ${SUBSCRIPTION_ID} --query "[].name" -o tsv)

      # Assign user assigned identity to the VMSS
      az vmss identity assign -g ${AZURE_CLUSTER_NAME} -n $VMSS_NAME --subscription ${SUBSCRIPTION_ID} --identities /subscriptions/${SUBSCRIPTION_ID}/resourcegroups/${RESOURCE_GROUP}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/${USER_MSI_NAME} >> /dev/null
    env:
      CLIENT_ID: $(AAD_CLIENT_ID)
      CLIENT_SECRET: $(AAD_CLIENT_SECRET)
      RESOURCE_GROUP: $(RESOURCE_GROUP)
      SUBSCRIPTION_ID: $(SUBSCRIPTION_ID)
    displayName: "[AKS Engine] Assign User MSI to the VMSS"
    condition: and(succeeded(), eq(variables['CLUSTER_TYPE'], 'aks-engine'))
