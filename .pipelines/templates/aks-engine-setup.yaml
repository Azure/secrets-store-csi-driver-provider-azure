steps:
  - script: |
      echo "##vso[task.setvariable variable=AZURE_CLUSTER_NAME]sscd-e2e-$(openssl rand -hex 6)"
      echo ${AZURE_CLUSTER_NAME}
    displayName: "[AKS Engine] Set cluster name"
    condition: and(succeeded(), eq(variables['CLUSTER_TYPE'], 'aks-engine'))

  - script: |
      echo "##vso[task.setvariable variable=AZURE_ADMIN_USERNAME]$USER"
      echo -e 'y\n' | ssh-keygen -f ~/.ssh/${AZURE_CLUSTER_NAME} -t rsa -N ''
      echo "##vso[task.setvariable variable=AZURE_SSH_KEY]$(cat ~/.ssh/${AZURE_CLUSTER_NAME}.pub)"
      echo "##vso[task.setvariable variable=LOCAL_SSH_KEY]$HOME/.ssh/${AZURE_CLUSTER_NAME}"
    displayName: "[AKS Engine] Generate SSH key"
    condition: and(succeeded(), eq(variables['CLUSTER_TYPE'], 'aks-engine'))

  - script: |
      envsubst < test/e2e/cluster_configs/$(CLUSTER_CONFIG).json > cluster.json
    displayName: "[AKS Engine] Build AKS-Engine API Model"
    condition: and(succeeded(), eq(variables['CLUSTER_TYPE'], 'aks-engine'))

  - script: |
      aks-engine deploy --api-model cluster.json \
        --location $(AZURE_LOCATION) \
        --subscription-id $(SUBSCRIPTION_ID) \
        --force-overwrite \
        --client-id $(AAD_CLIENT_ID) \
        --client-secret $(AAD_CLIENT_SECRET)

      export KUBECONFIG="$(pwd)/_output/${AZURE_CLUSTER_NAME}/kubeconfig/kubeconfig.$(AZURE_LOCATION).json"
      echo "##vso[task.setvariable variable=KUBECONFIG]${KUBECONFIG}"

      # set CLUSTER_RESOURCE_GROUP for e2e test config
      export CLUSTER_RESOURCE_GROUP="${AZURE_CLUSTER_NAME}"
      echo "##vso[task.setvariable variable=CLUSTER_RESOURCE_GROUP]${CLUSTER_RESOURCE_GROUP}"

      # Sleep for 120 seconds to wait for nodes and pods to become ready
      sleep 2m
      kubectl wait --for=condition=ready node --all
      kubectl wait pod -n kube-system --for=condition=Ready --all
      kubectl get nodes -owide
      kubectl cluster-info
    displayName: "[AKS Engine] Deploy Azure cluster"
    condition: and(succeeded(), eq(variables['CLUSTER_TYPE'], 'aks-engine'))
