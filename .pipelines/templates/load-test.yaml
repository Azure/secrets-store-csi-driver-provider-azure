jobs:
  - job:
    displayName: aks-load-test
    timeoutInMinutes: 360
    cancelTimeoutInMinutes: 30
    workspace:
      clean: all
    variables:
    - name: HOME
      value: $(System.DefaultWorkingDirectory)
    - name: GOPATH
      value: $(HOME)/go
    - name: perf-tests.repo.path
      value: $(GOPATH)/src/k8s.io/perf-tests
    - group: csi-secrets-store-load
    steps:
      - bash: |
          # we are not pinning this since there are no tags for perf-tests
          git clone -b $(checkout.branch) $(checkout.repo) $(perf-tests.repo.path)
        displayName: Checkout $(checkout.repo) @ $(checkout.branch)

      - template: build-images.yaml

      - script: |
          az account set -s=$(LOAD_TEST_SUBSCRIPTION_ID)
        displayName: "Set subscription for load tests"

      - template: aks-setup.yaml

      - template: assign-user-identity.yaml
        parameters:
          identitySubscriptionID: $(LOAD_TEST_SUBSCRIPTION_ID)

      - script: |
          echo "Installing helm..."
          curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
        displayName: "Install helm"

      - script: |
          kubectl wait --for=condition=ready node --all
          kubectl wait pod -n kube-system --for=condition=Ready --all
          kubectl get nodes -owide
          kubectl cluster-info
        displayName: "Check cluster's health"

      - script: |
          export REGISTRY="${REGISTRY:-$(REGISTRY_NAME).azurecr.io/k8s/csi/secrets-store}"

          helm install csi manifest_staging/charts/csi-secrets-store-provider-azure --namespace $NAMESPACE --wait --timeout=10m -v=5 --debug \
            --set image.repository=${REGISTRY}/provider-azure \
            --set image.tag=${IMAGE_VERSION} \
            --set secrets-store-csi-driver.enableSecretRotation=true \
            --set secrets-store-csi-driver.syncSecret.enabled=true \
            --dependency-update

          envsubst < test/load/config-deployment-template.yaml > test/load/config.yaml
          envsubst < test/load/deployment-template.yaml > test/load/deployment.yaml
          envsubst < test/load/secret-provider-class-template.yaml > test/load/secret-provider-class.yaml
        displayName: "Deploy secrets-store-csi-driver and azure keyvault provider"
        workingDirectory: "$(system.defaultWorkingDirectory)"
        env:
          NAMESPACE: "kube-system"
          SUBSCRIPTION_ID: $(LOAD_TEST_SUBSCRIPTION_ID)
          USER_ASSIGNED_IDENTITY_CLIENT_ID: $(USER_ASSIGNED_IDENTITY_CLIENT_ID)

      - script: |
          echo "--- CONFIG ---"
          cat test/load/config.yaml
          echo "--- DEPLOYMENT ---"
          cat test/load/deployment.yaml
          echo "--- SECRET PROVIDER CLASS ---"
          cat test/load/secret-provider-class.yaml
        workingDirectory: "$(system.defaultWorkingDirectory)"
        displayName: "Get yaml"

      - script: |
          let NODE_COUNT=${AGENT_COUNT}*${NODE_POOL_COUNT}
          ./run-e2e.sh cluster-loader2 \
            --nodes=${NODE_COUNT} \
            --provider=local \
            --report-dir="$(perf-tests.repo.path)/_artifacts" \
            --masterip=${MASTERIP} \
            --master-internal-ip=${MASTERINTERNALIP} \
            --testconfig="$(system.defaultWorkingDirectory)/test/load/config.yaml"
        workingDirectory: "$(perf-tests.repo.path)"
        displayName: "Run clusterloader2 test"

      - script: |
          echo "--- GET NODES ---"
          kubectl get nodes
          echo "--- GET NS ---"
          kubectl get ns
          echo "--- GET PODS ---"
          kubectl get pods --all-namespaces
          echo "--- TOP PODS ---"
          kubectl top pods -n kube-system
        workingDirectory: "$(perf-tests.repo.path)"
        condition: succeededOrFailed()
        displayName: "Get stats"

      - template: get-logs.yaml
        parameters:
          logUID: load-test

      - template: publish-load-test-result.yaml

      - script: |
          az aks delete -g ${AZURE_CLUSTER_NAME} -n ${AZURE_CLUSTER_NAME} --yes --no-wait
          az group delete -g ${AZURE_CLUSTER_NAME} --yes --no-wait
        displayName: "Delete resource group"
        condition: always()

      - template: cleanup-images.yaml
        parameters:
            imageVersion: $(IMAGE_VERSION)
            registryRepo: $(CI_PROVIDER_REPOSITORY)
            subscriptionId: $(SUBSCRIPTION_ID)
            registryName: $(REGISTRY_NAME)
