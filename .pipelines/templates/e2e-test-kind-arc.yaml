jobs:
  - job: e2e_arc_kind
    variables:
    - name: AZURE_ENVIRONMENT_FILEPATH
      value: /etc/kubernetes/custom_environment.json
    - name: VOLUME_NAME
      value: cloudenvfile-vol
    - group: csi-secrets-store-e2e-kind
    steps:
    - template: az-login.yaml
    - template: arc-setup.yaml
    - script: |
        make install-helm install-kubectl setup-kind
      displayName: "install dependencies and setup kind"
      condition: succeeded()
    - template: arc-connect.yaml
    # - template: arc-extension-create.yaml
    #   parameters:
    #     azureClusterName: $(AZURE_CLUSTER_NAME)
    #     releaseTrain: preview
    #     configurationSettings: "'secrets-store-csi-driver.enableSecretRotation=true' \
    #     'secrets-store-csi-driver.rotationPollInterval=30s' \
    #     'secrets-store-csi-driver.syncSecret.enabled=true' \
    #     'linux.volumes[0].name=$(VOLUME_NAME)' \
    #     'linux.volumes[0].hostPath.path=$(AZURE_ENVIRONMENT_FILEPATH)' \
    #     'linux.volumes[0].hostPath.type=File' \
    #     'linux.volumeMounts[0].name=$(VOLUME_NAME)' \
    #     'linux.volumeMounts[0].mountPath=$(AZURE_ENVIRONMENT_FILEPATH)'"

    - script: |
        az k8s-extension create \
        --name ${AZURE_CLUSTER_NAME} \
        --extension-type Microsoft.AzureKeyVaultSecretsProvider \
        --scope cluster \
        --cluster-name ${AZURE_CLUSTER_NAME} \
        --resource-group ${AZURE_CLUSTER_NAME} \
        --cluster-type connectedClusters \
        --release-train preview \
        --release-namespace kube-system \
        --configuration-settings 'secrets-store-csi-driver.enableSecretRotation=true' \
        'secrets-store-csi-driver.rotationPollInterval=30s' \
        'secrets-store-csi-driver.syncSecret.enabled=true' \
        'linux.volumes[0].name=$(VOLUME_NAME)' \
        'linux.volumes[0].hostPath.path=$(AZURE_ENVIRONMENT_FILEPATH)' \
        'linux.volumes[0].hostPath.type=File' \
        'linux.volumeMounts[0].name=$(VOLUME_NAME)' \
        'linux.volumeMounts[0].mountPath=$(AZURE_ENVIRONMENT_FILEPATH)'

        echo "Az version :- "
        az version
         
        # Arc extensions will go through different phases (Pending, Installed etc.) of installation. We want to make sure extension is 'Installed' before running e2e tests.
        echo "verifying extension install status..."
        for i in $(seq 1 30); do
          az k8s-extension show -c ${AZURE_CLUSTER_NAME} -t connectedClusters -n ${AZURE_CLUSTER_NAME} -g ${AZURE_CLUSTER_NAME}
          installState=$(az k8s-extension show -c ${AZURE_CLUSTER_NAME} -t connectedClusters -n ${AZURE_CLUSTER_NAME} -g ${AZURE_CLUSTER_NAME} --query "installState" -otsv)
          if [ "$installState" == "Installed" ]; then
            echo "AzureKeyVaultSecretsProvider extension is 'Installed'"
            break
          else
            echo "Install state - $installState"
            sleep 2
          fi
        done

        if [ "$installState" != "Installed" ]; then
          echo "failed to install extension."
          exit 1
        fi

        helm ls -A
        helm get values ${AZURE_CLUSTER_NAME} -n kube-system
        kubectl get pods -n kube-system
      displayName: "install AzureKeyVaultSecretsProvider extension"
      condition: succeeded()
    # - script: |
    #     make e2e-test
    #   displayName: Run e2e tests
    #   env:
    #     AZURE_CLIENT_ID: $(AZURE_CLIENT_ID)
    #     AZURE_CLIENT_SECRET: $(AZURE_CLIENT_SECRET)
    #     KEY_NAME: $(KEY_NAME)
    #     KEY_VERSION: $(KEY_VERSION)
    #     KEYVAULT_NAME: $(KEYVAULT_NAME)
    #     SECRET_NAME: $(SECRET_NAME)
    #     TENANT_ID: $(TENANT_ID)
    #     CI_KIND_CLUSTER: true
    #     AZURE_ENVIRONMENT_FILEPATH: $(AZURE_ENVIRONMENT_FILEPATH)
    #     IS_ARC_TEST: true
    #   condition: succeeded()
    - template: e2e-test.yaml
      parameters:
        testName: "arc extension e2e test"
        ciKindCluster: true
        isArcTest: true
        azureEnvironmentFilepath: $(AZURE_ENVIRONMENT_FILEPATH)
    - template: teardown.yaml
