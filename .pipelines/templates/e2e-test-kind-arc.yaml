jobs:
  - job: e2e_arc_kind
    variables:
    - name: AZURE_ENVIRONMENT_FILEPATH
      value: /etc/kubernetes/custom_environment.json
    - name: VOLUME_NAME
      value: cloudenvfile-vol
    - group: csi-secrets-store-e2e-kind
    steps:
    - script: |
        az login -i > /dev/null
        az account set -s=$(SUBSCRIPTION_ID)
      displayName: "az login"
    - script: |
        az extension add --name connectedk8s
        az extension add --name k8s-extension
      displayName: "add cli extensions"
    - script: |
        make install-helm install-kubectl setup-kind
      displayName: "setup KinD"
    - script: |
        clusterName=sscd-arc-e2e-$(openssl rand -hex 6)
        echo "##vso[task.setvariable variable=AZURE_CLUSTER_NAME]$clusterName"
        echo "Cluster name is set to - $clusterName"
        echo ${AZURE_CLUSTER_NAME}
      displayName: "set cluster name"
      condition: succeeded()
    - script: |
        az group create -n ${AZURE_CLUSTER_NAME} -l $(AZURE_CANARY_LOCATION)

        az connectedk8s connect -n ${AZURE_CLUSTER_NAME} -g ${AZURE_CLUSTER_NAME} --no-wait

        echo "verifying cluster connectivity..."
        for i in $(seq 1 25); do
          isProvisioned=$(az connectedk8s list --resource-group ${AZURE_CLUSTER_NAME} --query "[*].provisioningState" -otsv)
          isConnected=$(az connectedk8s list --resource-group ${AZURE_CLUSTER_NAME} --query "[*].connectivityStatus" -otsv)
          if [ "$isProvisioned" == "Succeeded" ]  && [ "$isConnected" == "Connected" ]; then
            echo "KinD cluster is 'Connected'"
            break
          else
            sleep 1
          fi
        done
      displayName: "connect KinD cluster"
      condition: succeeded()
    - script: |
        az k8s-extension create --name ${AZURE_CLUSTER_NAME} --extension-type Microsoft.AzureKeyVaultSecretsProvider --scope cluster --cluster-name ${AZURE_CLUSTER_NAME} --resource-group ${AZURE_CLUSTER_NAME} --cluster-type connectedClusters --release-train preview --release-namespace kube-system --configuration-settings 'secrets-store-csi-driver.enableSecretRotation=true' 'secrets-store-csi-driver.rotationPollInterval=30s' 'secrets-store-csi-driver.syncSecret.enabled=true' 'linux.volumes[0].name=$(VOLUME_NAME)' 'linux.volumes[0].hostPath.path=$(AZURE_ENVIRONMENT_FILEPATH)' 'linux.volumes[0].hostPath.type=File' 'linux.volumeMounts[0].name=$(VOLUME_NAME)' 'linux.volumeMounts[0].mountPath=$(AZURE_ENVIRONMENT_FILEPATH)'

        echo "verifying extension install status..."
        for i in $(seq 1 25); do
          isInstalled=$(az k8s-extension show -c ${AZURE_CLUSTER_NAME} -t connectedClusters -n ${AZURE_CLUSTER_NAME} -g ${AZURE_CLUSTER_NAME} --query "installState" -otsv)
          if [ "$isInstalled" == "Installed" ]; then
            echo "AzureKeyVaultSecretsProvider extension is 'Installed'"
            break
          else
            sleep 1
          fi
        done

        helm ls -A
      displayName: "install AzureKeyVaultSecretsProvider extension"
    - script: |
        make e2e-test
      displayName: Run e2e tests
      env:
        AZURE_CLIENT_ID: $(AZURE_CLIENT_ID)
        AZURE_CLIENT_SECRET: $(AZURE_CLIENT_SECRET)
        KEY_NAME: $(KEY_NAME)
        KEY_VERSION: $(KEY_VERSION)
        KEYVAULT_NAME: $(KEYVAULT_NAME)
        SECRET_NAME: $(SECRET_NAME)
        TENANT_ID: $(TENANT_ID)
        CI_KIND_CLUSTER: true
        AZURE_ENVIRONMENT_FILEPATH: $(AZURE_ENVIRONMENT_FILEPATH)
        IS_SOAK_TEST: true # setting this env var since arc extension manages installation.
    - template: teardown.yaml
