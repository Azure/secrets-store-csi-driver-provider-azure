{{- if .Values.arc.isMonitoringEnabled }}
{{- if .Values.linux.enabled}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: arc-{{ template "sscdpa.fullname" . }}-monitoring
  namespace: {{ .Release.Namespace }}
{{ include "sscdpa.arc.labels" . | indent 2 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "arc-{{ template "sscdpa.fullname" . }}"
  template:
    metadata:
{{ include "sscdpa.arc.labels" . | indent 6 }}
    spec:
      serviceAccountName: csi-secrets-store-provider-azure
      hostNetwork: true
      containers:
        # Prom MDM Converter
        - name: prom-mdm-converter
          image: "{{ .Values.arc.promMdmConverter.image.repository }}:{{ .Values.arc.promMdmConverter.image.tag }}"
          imagePullPolicy: {{ .Values.arc.promMdmConverter.image.pullPolicy }}
          env:
          - name: SERVER_PORT
            value: "{{ .Values.arc.telegraf.prometheusRemoteWritePort }}"
          - name: EXTENSION_RESOURCE_ID
            value: "{{ .Values.Azure.Extension.ResourceId }}"
          resources:
{{ toYaml .Values.arc.promMdmConverter.resources | indent 12 }}
        - name: mdm
          image: "{{ .Values.arc.mdm.image.repository }}:{{ .Values.arc.mdm.image.tag }}"
          imagePullPolicy: {{ .Values.arc.mdm.image.pullPolicy }}
          env: 
          - name: ROLEINSTANCE
            valueFrom: 
              fieldRef: 
                fieldPath: spec.nodeName
          - name: CONFIG_OVERRIDES_FILE 
            value: /tmp/geneva_mdm/mdmconfig.json
          - name: MDM_INPUT
            value: statsd_udp,statsd_tcp
          - name: MDM_LOG_LEVEL 
            value: "Info"
          volumeMounts: 
            - name: mdm-config 
              mountPath: /tmp/geneva_mdm
          resources:
{{ toYaml .Values.arc.mdm.resources | indent 12 }}
        # MSI Adapter
        - name: msi-adapter
          image: "{{ .Values.arc.msiAdapter.image.repository }}:{{ .Values.arc.msiAdapter.image.tag }}"
          imagePullPolicy: {{ .Values.arc.msiAdapter.image.pullPolicy }}
          env: 
          - name: TOKEN_NAMESPACE 
            value: {{ .Release.Namespace }}
          - name: EXTENSION_ARMID
            value: {{ .Values.Azure.Extension.ResourceId }}
          - name: EXTENSION_NAME 
            value: {{ .Values.Azure.Extension.Name }}
          - name: CLUSTER_TYPE 
            value: ConnectedClusters 
          - name: CLUSTER_IDENTITY 
            value: "false" 
          - name: MANAGED_IDENTITY_AUTH 
            value: "true" 
          - name: TEST_MODE 
            value: "false"
          resources:
{{ toYaml .Values.arc.msiAdapter.resources | indent 12 }}
          securityContext: 
            capabilities: 
              add: 
               - NET_ADMIN
        # Telegraf
        - name: telegraf
          image: "{{ .Values.arc.telegraf.image.repository }}:{{ .Values.arc.telegraf.image.tag }}"
          imagePullPolicy: {{ .Values.arc.telegraf.image.pullPolicy }}
          resources:
{{ toYaml .Values.arc.telegraf.resources | indent 12 }}
          volumeMounts: 
            - name: telegraf-conf
              mountPath: /etc/telegraf/telegraf.conf
              subPath: telegraf.conf
        # Pipeline agent for logging
        - name: amacoreagent
          image: "{{ .Values.arc.amacoreagent.image.repository }}:{{ .Values.arc.amacoreagent.image.tag }}"
          imagePullPolicy: {{ .Values.arc.amacoreagent.image.pullPolicy }}
          resources:
{{ toYaml .Values.arc.amacoreagent.resources | indent 12 }}
          env:
          - name: MONITORING_GCS_AUTH_ID_TYPE
            value: AuthMSIToken
          - name: PA_TENANTS_DIR
            value: /etc/tenants
          - name: PA_GIG_BRIDGE_MODE
            value: "1"
          - name: PA_FLUENT_SOCKET_PORT
            value: "15000"
          - name: PA_TRACEFLAGS
            value: "4"
          - name: OTLP_DEBUG_VERBOSE
            value: "1"
          - name: FLUENTD_PORT
            value: "{{ .Values.arc.fluentd.port }}"
          - name: MDSD_DEBUG_LOG_FLAGS
            value: "-T 0x2002"
          - name: TENANT
            value: "{{ .Values.arc.amacoreagent.logsLocation }}"
          - name: ROLE
            value: "{{ .Values.arc.amacoreagent.logsName }}"
          - name: ROLEINSTANCE
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: MONITORING_TENANT
            value: "{{ .Values.arc.amacoreagent.logsLocation }}"
          - name: MONITORING_ROLE
            value: "{{ .Values.arc.amacoreagent.logsName }}"
          - name: MONITORING_ROLE_INSTANCE
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: MONITORING_GCS_ENVIRONMENT
            value: "{{ .Values.arc.amacoreagent.logsEnvironment }}"
          - name: MONITORING_GCS_ACCOUNT
            value: "{{ .Values.arc.amacoreagent.logsName }}"
          - name: MONITORING_GCS_REGION
            value: "{{ .Values.arc.amacoreagent.logsLocation }}"
          - name: MONITORING_GCS_NAMESPACE
            value: "{{ .Values.arc.amacoreagent.logsName }}"
          - name: MONITORING_CONFIG_VERSION
            value: "{{ .Values.arc.amacoreagent.logsConfigVersion }}"
          - name: MDSD_CONFIG_DIR
            value: /tmp
          - name: DOCKER_LOGGING
            value: "true"
          volumeMounts:
            - name: tenants-conf-vol
              mountPath: /etc/tenants
            - name: var-log-vol
              mountPath: /geneva/geneva_logs
            - name: mdsd-run-vol
              mountPath: /var/run/mdsd
        # FluentD
        - name: fluentd
          image: "{{ .Values.arc.fluentd.image.repository }}:{{ .Values.arc.fluentd.image.tag }}"
          imagePullPolicy: {{ .Values.arc.fluentd.image.pullPolicy }}
          resources:
{{ toYaml .Values.arc.fluentd.resources | indent 12 }}
          env:
            - name: FLUENTD_CONF
              value: /etc/fluentd/fluentd.conf
          volumeMounts:
            - name: fluentd-conf-vol
              mountPath: /etc/fluentd
            - name: fluentd-buffer-vol
              mountPath: "/var/log/td-agent"
            - name: mdsd-run-vol
              mountPath: "/var/run/mdsd"
            - name: docker-log-vol
              mountPath: /var/lib/docker/containers
              readOnly: true
            - name: var-log-vol
              mountPath: /var/log
            - name: run-journal-vol
              mountPath: /run/log/journal
              readOnly: true
      affinity:
{{ toYaml .Values.linux.affinity | indent 8 }}
      {{- if .Values.linux.priorityClassName }}
      priorityClassName: {{ .Values.linux.priorityClassName | quote }}
      {{- end }}
      volumes:
        - name: telegraf-conf
          configMap:
            name: arc-telegraf-config
        - name: mdm-config 
          configMap: 
            name: arc-mdm-config
        - name: mdsd-run-vol
          emptyDir: {}        
        - name: var-log-vol
          hostPath:
            path: /var/log
        - name: run-journal-vol
          hostPath:
            path: /run/log/journal
        - name: fluentd-buffer-vol
          emptyDir: {}
        - name: docker-log-vol
          hostPath:
            path: /var/lib/docker/containers
        - name: fluentd-conf-vol
          configMap:
            name: arc-fluentd-conf
        - name: tenants-conf-vol
          configMap:
            name: arc-gcstenant-conf
      nodeSelector:
        kubernetes.io/os: linux
{{- if .Values.linux.nodeSelector }}
{{- toYaml .Values.linux.nodeSelector | nindent 8 }}
{{- end }}
{{- with .Values.linux.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
{{- end }}
{{- end }}
{{- end }}
